import logging
import time
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InputFile, FSInputFile
from aiogram.exceptions import TelegramForbiddenError
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
import g4f
from g4f.client import Client  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from image_gen_kandinsky import Text2ImageAPI
from image_handlers import generate_image_with_flux_and_send
from text_handlers import process_user_message
from googletrans import Translator  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ levellevel –Ω–∞ levelname
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('bot.db', check_same_thread=False)
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        model TEXT NOT NULL DEFAULT 'gpt-4'
    )
''')

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
cursor.execute('''
    CREATE TABLE IF NOT EXISTS chat_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        message_type TEXT NOT NULL,
        content TEXT NOT NULL,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
''')
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = ""
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
TEXT_MODELS = ["llama-3.3-70b", "deepseek-v3", "deepseek-r1", "GPT-4o", "gpt-4o-mini",]
IMAGE_MODELS = ["flux","flux-pro", "flux-dev", "flux-schnell", "midjourney" ]

def get_model_keyboard_paginated(page: int = 1):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    keyboard = InlineKeyboardBuilder()
    if page == 1:
        for model in TEXT_MODELS:
            keyboard.button(text=model.capitalize(), callback_data=f"model_{model}")
        keyboard.button(text="‚û°Ô∏è –ú–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="page_2")
    elif page == 2:
        for model in IMAGE_MODELS:
            keyboard.button(text=model.capitalize(), callback_data=f"model_{model}")
        keyboard.button(text="‚¨ÖÔ∏è –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞", callback_data="page_1")
    keyboard.adjust(2)
    return keyboard.as_markup()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Text2ImageAPI
TEXT2IMAGE_API_URL = ""
TEXT2IMAGE_API_KEY = ""
TEXT2IMAGE_SECRET_KEY = ""
text2image_api = Text2ImageAPI(TEXT2IMAGE_API_URL, TEXT2IMAGE_API_KEY, TEXT2IMAGE_SECRET_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
g4f_client = Client()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å ü§ñ")],
        [KeyboardButton(text="–û –±–æ—Ç–µ ‚ÑπÔ∏è")],
    ],
    resize_keyboard=True
)

async def get_user_model(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    cursor.execute("SELECT model FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else "gpt-4"

async def set_user_model(user_id: int, model: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    cursor.execute("INSERT OR REPLACE INTO users (user_id, model) VALUES (?, ?)", (user_id, model))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    conn.commit()

async def save_message(user_id: int, message_type: str, content: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞."""
    cursor.execute(
        "INSERT INTO chat_history (user_id, message_type, content) VALUES (?, ?, ?)",
        (user_id, message_type, content)
    )
    conn.commit()

async def get_chat_history(user_id: int, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
    cursor.execute(
        "SELECT message_type, content FROM chat_history WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?",
        (user_id, limit)
    )
    return cursor.fetchall()[::-1]

async def clear_chat_history(user_id: int):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cursor.execute("DELETE FROM chat_history WHERE user_id = ?", (user_id,))
    conn.commit()

async def generate_gpt_stream(messages: list, model: str, queue: asyncio.Queue, providers: list):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º g4f."""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://www.google.com/',
            'Origin': 'https://www.google.com/'
        }

        for provider in providers:
            try:
                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider.__name__}")
                full_response = ""
                async for chunk in g4f.ChatCompletion.create_async(
                        model=model,
                        messages=messages,
                        provider=provider,
                        headers=headers,
                        timeout=10,
                        stream=True
                ):
                    logger.debug(f"üì¶ –ü–æ–ª—É—á–µ–Ω chunk: {chunk} (—Ç–∏–ø: {type(chunk)})")
                    if isinstance(chunk, str):
                        full_response += chunk
                        await queue.put(chunk)
                    elif hasattr(chunk, 'content'):
                        full_response += chunk.content
                        await queue.put(chunk.content)
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chunk: {chunk}")
                        await queue.put(f"[–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {chunk}]")
                if full_response.strip():
                    await queue.put(None)
                return
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {provider.__name__}: {str(e)}")
                continue
        await queue.put(Exception("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await queue.put(e)


@router.message(Command("menu"))
async def show_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@router.message(Command("help"))
async def show_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
    await message.answer(
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/delete_history - —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è –¥–∏–æ–ª–æ–≥–∞\n"
        "/menu - –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n"
    )

@router.message(F.text == "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å ü§ñ")
async def choose_model(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:", reply_markup=get_model_keyboard_paginated(page=1))

@router.callback_query(F.data.startswith("page_"))
async def paginate_models(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π."""
    page = int(callback.data.split("_")[1])
    if page == 1:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞:", reply_markup=get_model_keyboard_paginated(page=1))
    elif page == 2:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=get_model_keyboard_paginated(page=2))
    await callback.answer()

@router.callback_query(F.data.startswith("model_"))
async def select_model(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É."""
    model_name = callback.data.split("_")[1]
    await set_user_model(callback.from_user.id, model_name)
    await callback.message.edit_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: {model_name}")
    await callback.answer("–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!")

@router.message(F.text == "–û –±–æ—Ç–µ ‚ÑπÔ∏è")
async def about_bot(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ."""
    await message.answer(
        "ü§ñ –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!\n"
        "–°–¥–µ–ª–∞–Ω–æ: baldiczxc\n"
        "–í–µ—Ä—Å–∏—è: 1.5\n"
        "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ api"
    )

@router.message(Command("delete_history"))
async def clear_history(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
    await clear_chat_history(message.from_user.id)
    await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    await set_user_model(message.from_user.id, "GPT-4o")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=main_menu
    )

@router.message(Command("history"))
async def check_history(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
    user_id = message.from_user.id
    history = await get_chat_history(user_id)
    if not history:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
    else:
        history_text = "\n".join([f"{msg_type}: {content}" for msg_type, content in history])
        await message.answer(f"–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{history_text}")


@router.message(F.text)
async def handle_user_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    generating_message = None
    try:
        user_id = message.from_user.id
        model = await get_user_model(user_id)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generating_message = await message.answer("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

        # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        translator = Translator()
        translated_text = await translator.translate(message.text, src='ru', dest='en')
        translated_text = translated_text.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å flux, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if model.lower().startswith("flux"):
            await generate_image_with_flux_and_send(message, translated_text, model)
            return

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        history = await get_chat_history(user_id, limit=10)
        await process_user_message(message, model, history, save_message)
    except TelegramForbiddenError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if generating_message:
            await generating_message.delete()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
